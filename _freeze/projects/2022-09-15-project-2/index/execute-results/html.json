{
  "hash": "40005aefe9dc374c58bcdfb55f9c8ef5",
  "result": {
    "markdown": "---\ntitle: \"Project 2\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Exploring temperature and rainfall in Australia\"\ndate: 2022-09-15\ncategories: [project 2, projects]\n---\n\n\n# Background\n\n**Due date: Sept 30 at 11:59pm**\n\nThe goal of this assignment is to practice designing and writing functions along with practicing our tidyverse skills that we learned in our previous project. \nWriting functions involves thinking about how code should be divided up and what the interface/arguments should be. \nIn addition, you need to think about what the function will return as output.\n\n\n### To submit your project\n\nPlease write up your project using R Markdown and processed with `knitr`. Compile your document as an **HTML file** and submit your HTML file to the dropbox on Courseplus. Please **show all your code** (i.e. make sure to set `echo = TRUE`) for each of the answers to each part.\n\n\n### Install packages\n\nBefore attempting this assignment, you should first install the following packages, if they are not already installed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\ninstall.packages(\"tidytuesdayR\")\n```\n:::\n\n\n# Part 1: Fun with functions\n\nIn this part, we are going to practice creating functions.\n\n### Part 1A: Exponential transformation \nThe exponential of a number can be written as an infinite series expansion of the form\n\n$$\n\\exp(x) = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\cdots\n$$\n\nOf course, we cannot compute an infinite series by the end of this term and so we must truncate it at a certain point in the series. The truncated sum of terms represents an approximation to the true exponential, but the approximation may be usable.\n\nWrite a function that computes the exponential of a number using the truncated series expansion. The function should take two arguments:\n\n- `x`: the number to be exponentiated\n\n- `k`: the number of terms to be used in the series expansion beyond the constant 1. The value of `k` is always $\\geq 1$.\n\nFor example, if $k = 1$, then the `Exp` function should return the number $1 + x$. If $k = 2$, then you should return the number $1 + x + x^2/2!$.\n\nInclude at least one example of output using your function. \n\n:::{.callout-note}\n\n- You can assume that the input value `x` will always be a *single* number. \n\n- You can assume that the value `k` will always be an integer $\\geq 1$. \n\n- Do not use the `exp()` function in R.\n\n- The `factorial()` function can be used to compute factorials.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExp <- function(x, k) {\n        # Add your solution here\n}\n```\n:::\n\n\n\n\n\n### Part 1B: Sample mean and sample standard deviation\n\nNext, write two functions called `sample_mean()` and `sample_sd()` that takes as input a vector of data of length $N$ and calculates the sample average and sample standard deviation for the set of $N$ observations. \n\n\n$$\n\\bar{x} = \\frac{1}{N} \\sum_{i=1}^n x_i\n$$\n\n$$\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n$$\n\nInclude at least one example of output using your functions. \n\n:::{.callout-note}\n\n- You can assume that the input value `x` will always be a *vector* of numbers of length *N*.\n\n- Do not use the `mean()` and `sd()` functions in R.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_mean <- function(x) {\n        # Add your solution here\n}\n\nsample_sd <- function(x) {\n        # Add your solution here\n}\n```\n:::\n\n\n\n\n### Part 1C: Confidence intervals\n\nNext, write a function called `calculate_CI()` that:\n\n1. There should be two inputs to the `calculate_CI()`. First, it should take as input a vector of data of length $N$. Second, the function should also have a `conf` ($=1-\\alpha$) argument that allows the confidence interval to be adapted for different $\\alpha$. \n\n2. Calculates a confidence interval (CI) (e.g. a 95% CI) for the estimate of the mean in the population. If you are not familiar with confidence intervals, it is an interval that contains the population parameter with probability $1-\\alpha$ taking on this form \n\n\n$$\n\\bar{x} \\pm t_{\\alpha/2, N-1} s_{\\bar{x}}\n$$ \n\n\nwhere $t_{\\alpha/2, N-1}$ is the value needed to generate an area of $\\alpha / 2$ in each tail of the $t$-distribution with $N-1$ degrees of freedom and $s_{\\bar{x}} = \\frac{s}{\\sqrt{N}}$ is the standard error of the mean. For example, if we pick a 95% confidence interval and $N$=50, then you can calculate $t_{\\alpha/2, N-1}$ as\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha <- 1 - 0.95\ndegrees_freedom = 50 - 1\nt_score = qt(p=alpha/2, df=degrees_freedom, lower.tail=FALSE)\n```\n:::\n\n\n\n3. Returns a named vector of length 2, where the first value is the `lower_bound`, the second value is the `upper_bound`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_CI <- function(x, conf = 0.95) {\n        # Add your solution here\n}\n```\n:::\n\n\nInclude example of output from your function showing the output when using two different levels of `conf`.\n\n\n:::{.callout-note}\n\nIf you want to check if your function output matches an existing function in R, consider a vector $x$ of length $N$ and see if the following two code chunks match. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_CI(x, conf = 0.95)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat = data.frame(x=x)\nfit <- lm(x ~ 1, dat)\n\n# Calculate a 95% confidence interval\nconfint(fit, level=0.95)\n```\n:::\n\n\n:::\n\n\n# Part 2: Wrangling data\n\nIn this part, we will practice our wrangling skills with the tidyverse that we learned about in module 1. \n\n### Data \n\nThe two datasets for this part of the assignment comes from [TidyTuesday](https://www.tidytuesday.com). \nSpecifically, we will use the following data from January 2020, which I have provided for you below:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load('2020-01-07')\nrainfall <- tuesdata$rainfall\ntemperature <- tuesdata$temperature\n```\n:::\n\n\nHowever, to avoid re-downloading data, we will check to see if those files already exist using an `if()` statement: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nif(!file.exists(here(\"data\",\"tuesdata_rainfall.RDS\"))){\n  tuesdata <- tidytuesdayR::tt_load('2020-01-07')\n  rainfall <- tuesdata$rainfall\n  temperature <- tuesdata$temperature\n  \n  # save the files to RDS objects\n  saveRDS(tuesdata$rainfall, file = here(\"data\",\"tuesdata_rainfall.RDS\"))\n  saveRDS(tuesdata$temperature, file = here(\"data\",\"tuesdata_temperature.RDS\"))\n}\n```\n:::\n\n\n:::{.callout-note}\n\nThe above code will only run if it cannot find the path to the `tuesdata_rainfall.RDS` on your computer. \nThen, we can just read in these files every time we knit the R Markdown, instead of re-downloading them every time. \n:::\n\nLet's load the datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrainfall <- readRDS(here(\"data\",\"tuesdata_rainfall.RDS\"))\ntemperature <- readRDS(here(\"data\",\"tuesdata_temperature.RDS\"))\n```\n:::\n\n\nNow we can look at the data with `glimpse()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nglimpse(rainfall)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 179,273\nColumns: 11\n$ station_code <chr> \"009151\", \"009151\", \"009151\", \"009151\", \"009151\", \"009151…\n$ city_name    <chr> \"Perth\", \"Perth\", \"Perth\", \"Perth\", \"Perth\", \"Perth\", \"Pe…\n$ year         <dbl> 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 196…\n$ month        <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01…\n$ day          <chr> \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10…\n$ rainfall     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ period       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ quality      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ lat          <dbl> -31.96, -31.96, -31.96, -31.96, -31.96, -31.96, -31.96, -…\n$ long         <dbl> 115.79, 115.79, 115.79, 115.79, 115.79, 115.79, 115.79, 1…\n$ station_name <chr> \"Subiaco Wastewater Treatment Plant\", \"Subiaco Wastewater…\n```\n:::\n\n```{.r .cell-code}\nglimpse(temperature)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 528,278\nColumns: 5\n$ city_name   <chr> \"PERTH\", \"PERTH\", \"PERTH\", \"PERTH\", \"PERTH\", \"PERTH\", \"PER…\n$ date        <date> 1910-01-01, 1910-01-02, 1910-01-03, 1910-01-04, 1910-01-0…\n$ temperature <dbl> 26.7, 27.0, 27.5, 24.0, 24.8, 24.4, 25.3, 28.0, 32.6, 35.9…\n$ temp_type   <chr> \"max\", \"max\", \"max\", \"max\", \"max\", \"max\", \"max\", \"max\", \"m…\n$ site_name   <chr> \"PERTH AIRPORT\", \"PERTH AIRPORT\", \"PERTH AIRPORT\", \"PERTH …\n```\n:::\n:::\n\n\nIf we look at the [TidyTuesday github repo](https://github.com/rfordatascience/tidytuesday/tree/master/data/2020#2020-data) from 2020, we see this dataset contains temperature and rainfall data from Australia.\n\n![](https://www.ga.gov.au/__data/assets/image/0005/12569/GA14206.jpg){.preview-image}\n\n\\[**Source**: [Geoscience Australia](https://www.ga.gov.au/scientific-topics/national-location-information/dimensions/climatic-extremes)\\]\n\n\nHere is a data dictionary for what all the column names mean: \n\n- <https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-07/readme.md#data-dictionary>\n\n### Tasks \n\nUsing the `rainfall` and `temperature` data, perform the following steps and create a new data frame called `df`: \n\n1. Start with `rainfall` dataset and drop any rows with NAs. \n2. Create a new column titled `date` that combines the columns `year`, `month`, `day` into one column separated by \"-\". (e.g. \"2020-01-01\"). This column should not be a character, but should be recognized as a date. (**Hint**: check out the `ymd()` function in `lubridate` R package). You will also want to add a column that just keeps the `year`. \n3. Using the `city_name` column, convert the city names (character strings) to all upper case. \n4. Join this wrangled rainfall dataset with the `temperature` dataset such that it includes only observations that are in both data frames. (**Hint**: there are two keys that you will need to join the two datasets together). (**Hint**: If all has gone well thus far, you should have a dataset with 83,964 rows and 13 columns). \n\n:::{.callout-note}\n\n- You may need to use functions outside these packages to obtain this result, in particular you may find the functions `drop_na()` from `tidyr` and `str_to_upper()` function from `stringr` useful.\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add your solution here\n```\n:::\n\n\n\n\n\n# Part 3: Data visualization\n\nIn this part, we will practice our `ggplot2` plotting skills within the tidyverse starting with our wrangled `df` data from Part 2. For full credit in this part (and for all plots that you make), your plots should include: \n\n1. An overall title for the plot and a subtitle summarizing key trends that you found. Also include a caption in the figure. \n2. There should be an informative x-axis and y-axis label.\n\nConsider playing around with the `theme()` function to make the figure shine, including playing with background colors, font, etc.\n\n### Part 3A: Plotting temperature data over time\n\nUse the functions in `ggplot2` package to make a line plot of the max and min temperature (y-axis) over time (x-axis) for each city in our wrangled data from Part 2. You should only consider years 2014 and onwards. For full credit, your plot should include: \n\n1. For a given city, the min and max temperature should both appear on the plot, but they should be two different colors. \n2. Use a facet function to facet by `city_name` to show all cities in one figure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add your solution here\n```\n:::\n\n\n\n\n### Part 3B: Plotting rainfall over time\n\nHere we want to explore the distribution of rainfall (log scale) with histograms for a given city (indicated by the `city_name` column) for a given year (indicated by the `year` column) so we can make some exploratory plots of the data. \n\n:::{.callout-note}\n\nYou are again using the wrangled data from Part 2.\n\n:::\n\nThe following code plots the data from one city (`city_name == \"PERTH\"`) in a given year (`year == 2000`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(city_name == \"PERTH\", year == 2000) %>% \n  ggplot(aes(log(rainfall))) + \n    geom_histogram()\n```\n:::\n\n\nWhile this code is useful, it only provides us information on one city in one year. We could cut and paste this code to look at other cities/years, but that can be error prone and just plain messy.\n\nThe aim here is to **design** and **implement** a function that can be re-used to visualize all of the data in this dataset. \n\n1. There are 2 aspects that may vary in the dataset: The **city_name** and the **year**. Note that not all combinations of `city_name` and `year` have measurements.\n\n2. Your function should take as input two arguments **city_name** and **year**.\n\n3. Given the input from the user, your function should return a **single** histogram for that input. Furthermore, the data should be **readable** on that plot so that it is in fact useful. It should be possible visualize the entire dataset with your function (through repeated calls to your function).\n\n3. If the user enters an input that does not exist in the dataset, your function should catch that and report an error (via the `stop()` function).\n\nFor this section, \n\n1. Write a short description of how you chose to design your function and why. \n\n2. Present the code for your function in the R markdown document.\n\n3. Include at least one example of output from your function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add your solution here\n```\n:::\n\n\n\n\n\n\n# Part 4: Apply functions and plot\n\n### Part 4A: Tasks\n\nIn this part, we will apply the functions we wrote in Part 1 to our rainfall data starting with our wrangled `df` data from Part 2.\n\n1. First, filter for only years including 2014 and onwards.\n2. For a given city and for a given year, calculate the sample mean (using your function `sample_mean()`), the sample standard deviation (using your function `sample_sd()`), and a 95% confidence interval for the average rainfall (using your function `calculate_CI()`). Specifically, you should add two columns in this summarized dataset: a column titled `lower_bound` and a column titled `upper_bound` containing the lower and upper bounds for you CI that you calculated (using your function `calculate_CI()`). \n3. Call this summarized dataset `rain_df`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add your solution here\n```\n:::\n\n\n\n\n### Part 4B: Tasks\n\nUsing the `rain_df`, plots the estimates of mean rainfall and the 95% confidence intervals on the same plot. There should be a separate faceted plot for each city. Think about using `ggplot()` with both `geom_point()` (and `geom_line()` to connect the points) for the means and `geom_errorbar()` for the lower and upper bounds of the confidence interval. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add your solution here\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}