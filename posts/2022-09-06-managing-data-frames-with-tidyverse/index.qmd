---
title: "Managing data frames with the Tidyverse"
author: 
  - name: Stephanie Hicks
    url: https://stephaniehicks.com
    affiliation: Department of Biostatistics, Johns Hopkins
    affiliation_url: https://publichealth.jhu.edu
description: " An introduction to data frames in R and the managing them with the dplyr R package"
date: 2022-09-06
categories: [module 2, week 2, R, programming, dplyr, here, tibble, tidyverse]
---

<!-- Add interesting quote -->

# Pre-lecture materials

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://r4ds.had.co.nz/tibbles>
2.  <https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling>
3.  [dplyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
:::

### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse>
-   <https://jhudatascience.org/tidyversecourse/get-data.html#tibbles>

# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Understand the advantages of a `tibble` and `data.frame` data objects in R
-   Learn about the dplyr R package to manage data frames
-   Recognize the key verbs to manage data frames in dplyr
-   Use the "pipe" operator to combine verbs together
:::

# Data Frames

The **data frame** (or `data.frame`) is a **key data structure** in statistics and in R.

The basic structure of a data frame is that there is **one observation per row and each column represents a variable, a measure, feature, or characteristic of that observation**.

R has an internal implementation of data frames that is likely the one you will use most often. However, there are packages on CRAN that implement data frames via things like relational databases that allow you to operate on very, very large data frames (but we will not discuss them here).

Given the importance of managing data frames, it is **important that we have good tools for dealing with them.**

For example, **operations** like filtering rows, re-ordering rows, and selecting columns, can often be tedious operations in R whose syntax is not very intuitive. The `dplyr` package is designed to mitigate a lot of these problems and to provide a highly optimized set of routines specifically for dealing with data frames.

## Tibbles

Another type of data structure that we need to discuss is called the **tibble**! It's best to think of tibbles as an updated and stylish version of the `data.frame`.

Tibbles are what tidyverse packages work with most seamlessly. Now, that **does not mean tidyverse packages *require* tibbles**.

In fact, they still work with `data.frames`, but the more you work with tidyverse and tidyverse-adjacent packages, the more you will see the advantages of using tibbles.

Before we go any further, tibbles *are* data frames, but they have some new bells and whistles to make your life easier.

### How tibbles differ from `data.frame`

There are a number of differences between tibbles and `data.frames`.

::: callout-tip
### Note

To see a full vignette about tibbles and how they differ from data.frame, you will want to execute `vignette("tibble")` and read through that vignette.
:::

We will summarize some of the most important points here:

-   **Input type remains unchanged** - `data.frame` is notorious for treating strings as factors; this will not happen with tibbles
-   **Variable names remain unchanged** - In base R, creating `data.frames` will remove spaces from names, converting them to periods or add "x" before numeric column names. Creating tibbles will not change variable (column) names.
-   **There are no `row.names()` for a tibble** - Tidy data requires that variables be stored in a consistent way, removing the need for row names.
-   **Tibbles print first ten rows and columns that fit on one screen** - Printing a tibble to screen will never print the entire huge data frame out. By default, it just shows what fits to your screen.

## Creating a tibble

The tibble package is part of the `tidyverse` and can thus be loaded in (once installed) using:

```{r}
#| message: false
library(tidyverse)
```

### `as_tibble()`

Since many packages use the historical `data.frame` from base R, you will often find yourself in the situation that you have a `data.frame` and want to convert that `data.frame` to a `tibbl`e.

To do so, the `as_tibble()` function is exactly what you are looking for.

For the example, here we use a dataset (`chicago.rds`) containing air pollution and temperature data for the city of Chicago in the U.S.

The dataset is available in the `/data` repository. You can load the data into R using the `readRDS()` function.

```{r}
library(here)
chicago <- readRDS(here("data", "chicago.rds"))
```

You can see some basic characteristics of the dataset with the `dim()` and `str()` functions.

```{r}
dim(chicago)
str(chicago)
```

We see this data structure is a `data.frame` with 6940 observations and 8 variables.

To convert this `data.frame` to a tibble you would use the following:

```{r}
str(as_tibble(chicago))
```

::: callout-tip
### Note

Tibbles, by default, **only print the first ten rows to screen**.

If you were to print the `data.frame` `chicago` to screen, all 6940 rows would be displayed. When working with large `data.frames`, this **default behavior can be incredibly frustrating**.

Using tibbles removes this frustration because of the default settings for tibble printing.
:::

Additionally, you will note that the **type of the variable is printed for each variable in the tibble**. This helpful feature is another added bonus of tibbles relative to `data.frame`.

#### Want to see more of the tibble?

If you *do* want to see more rows from the tibble, there are a few options!

1.  The `View()` function in RStudio is incredibly helpful. The input to this function is the `data.frame` or tibble you would like to see.

Specifically, `View(chicago)` would provide you, the viewer, with a scrollable view (in a new tab) of the complete dataset.

2.  Use the fact that `print()` enables you to specify how many rows and columns you would like to display.

Here, we again display the `chicago` data.frame as a tibble but specify that we would only like to see 5 rows. The `width = Inf` argument specifies that we would like to see all the possible columns. Here, there are only 8, but for larger datasets, this can be helpful to specify.

```{r}
as_tibble(chicago) %>% 
  print(n = 5, width = Inf)
```

### `tibble()`

Alternatively, you can **create a tibble on the fly** by using `tibble()` and specifying the information you would like stored in each column.

::: callout-tip
### Note

If you provide a single value, this value will be repeated across all rows of the tibble. This is referred to as "recycling inputs of length 1."

In the example here, we see that the column `c` will contain the value '1' across all rows.

```{r}
tibble(
  a = 1:5,
  b = 6:10,
  c = 1,
  z = (a + b)^2 + c
)
```
:::

The `tibble()` function allows you to quickly generate tibbles and even allows you to **reference columns within the tibble you are creating**, as seen in column z of the example above.

::: callout-tip
### Note

**Tibbles can have column names that are not allowed** in `data.frame`.

In the example below, we see that to utilize a nontraditional variable name, you surround the column name with backticks.

Note that to refer to such columns in other tidyverse packages, you willl continue to use backticks surrounding the variable name.

```{r}
tibble(
  `two words` = 1:5,
  `12` = "numeric",
  `:)` = "smile",
)
```
:::

## Subsetting tibbles

Subsetting tibbles also differs slightly from how subsetting occurs with `data.frame`.

When it comes to tibbles,

-   `[[` can subset by name or position
-   `$` only subsets by name

For example:

```{r}
df <- tibble(
  a = 1:5,
  b = 6:10,
  c = 1,
  z = (a + b)^2 + c
)

# Extract by name using $ or [[]]
df$z
df[["z"]]

# Extract by position requires [[]]
df[[4]]
```

Having now discussed tibbles, which are the type of object most tidyverse and tidyverse-adjacent packages work best with, we now know the goal.

In many cases, **tibbles are ultimately what we want to work with in R**.

However, **data are stored in many different formats outside of R**. We will spend the rest of this lesson discussing wrangling functions that work either a `data.frame` or `tibble`.

# The `dplyr` Package

The `dplyr` package was developed by Posit (formely RStudio) and is **an optimized and distilled** version of the older `plyr` **package for data manipulation or wrangling**.

![Artwork by Allison Horst on the dplyr package](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_wrangling.png){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]

The `dplyr` package does not provide any "new" functionality to R per se, in the sense that everything `dplyr` does could already be done with base R, but it **greatly** simplifies existing functionality in R.

One important contribution of the `dplyr` package is that it **provides a "grammar" (in particular, verbs) for data manipulation and for operating on data frames**.

With this grammar, you can sensibly communicate what it is that you are doing to a data frame that other people can understand (assuming they also know the grammar). This is useful because it **provides an abstraction for data manipulation that previously did not exist**.

Another useful contribution is that the `dplyr` functions are **very** fast, as many key operations are coded in C++.

### `dplyr` grammar

Some of the key "verbs" provided by the `dplyr` package are

-   `select()`: return a subset of the columns of a data frame, using a flexible notation

-   `filter()`: extract a subset of rows from a data frame based on logical conditions

-   `arrange()`: reorder rows of a data frame

-   `rename()`: rename variables in a data frame

-   `mutate()`: add new variables/columns or transform existing variables

-   `summarise()` / `summarize()`: generate summary statistics of different variables in the data frame, possibly within strata

-   `%>%`: the "pipe" operator is used to connect multiple verb actions together into a pipeline

::: callout-tip
### Note

The `dplyr` package as a number of its own data types that it takes advantage of.

For example, there is a handy `print()` method that prevents you from printing a lot of data to the console. Most of the time, these additional data types are transparent to the user and do not need to be worried about.
:::

### `dplyr` functions

All of the functions that we will discuss here will have a few common characteristics. In particular,

1.  The **first argument** is a data frame type object.

2.  The **subsequent arguments** describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly (without using the `$` operator, just use the column names).

3.  The **return result** of a function is a new data frame.

4.  Data frames must be **properly formatted** and annotated for this to all be useful. In particular, the data must be [tidy](http://www.jstatsoft.org/v59/i10/paper). In short, there should be one observation per row, and each column should represent a feature or characteristic of that observation.

![Artwork by Allison Horst on tidy data](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]

### `dplyr` installation

The `dplyr` package can be installed from CRAN or from GitHub using the `devtools` package and the `install_github()` function. The GitHub repository will usually contain the latest updates to the package and the development version.

To install from CRAN, just run

```{r,eval=FALSE}
install.packages("dplyr")
```

The `dplyr` package is also installed when you install the `tidyverse` meta-package.

After installing the package it is important that you load it into your R session with the `library()` function.

```{r}
library(dplyr)
```

You may get some warnings when the package is loaded because there are functions in the `dplyr` package that have the same name as functions in other packages. For now you can ignore the warnings.

### `select()`

We will continue to use the `chicago` dataset containing air pollution and temperature data.

```{r}
chicago <- as_tibble(chicago)
str(chicago)
```

The `select()` function can be used to **select columns of a data frame** that you want to focus on.

::: callout-tip
### Example

Suppose we wanted to take the first 3 columns only. There are a few ways to do this.

We could for example use numerical indices:

```{r}
names(chicago)[1:3]
```

But we can also use the names directly:

```{r}
subset <- select(chicago, city:dptp)
head(subset)
```
:::

::: callout-tip
### Note

The `:` normally cannot be used with names or strings, but inside the `select()` function you can use it to specify a range of variable names.
:::

You can also **omit** variables using the `select()` function by using the negative sign. With `select()` you can do

```{r, eval=FALSE}
select(chicago, -(city:dptp))
```

which indicates that we should include every variable *except* the variables `city` through `dptp`. The equivalent code in base R would be

```{r,eval=FALSE}
i <- match("city", names(chicago))
j <- match("dptp", names(chicago))
head(chicago[, -(i:j)])
```

Not super intuitive, right?

The `select()` function also allows a special syntax that allows you to specify variable names based on patterns. So, for example, if you wanted to keep every variable that ends with a "2", we could do

```{r}
subset <- select(chicago, ends_with("2"))
str(subset)
```

Or if we wanted to keep every variable that starts with a "d", we could do

```{r}
subset <- select(chicago, starts_with("d"))
str(subset)
```

You can also use more general regular expressions if necessary. See the help page (`?select`) for more details.

### `filter()`

The `filter()` function is used to **extract subsets of rows** from a data frame. This function is similar to the existing `subset()` function in R but is quite a bit faster in my experience.

![Artwork by Allison Horst on filter() function](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]

::: callout-tip
### Example

Suppose we wanted to extract the rows of the `chicago` data frame where the levels of PM2.5 are greater than 30 (which is a reasonably high level), we could do

```{r}
chic.f <- filter(chicago, pm25tmean2 > 30)
str(chic.f)
```
:::

You can see that there are now only `r nrow(chic.f)` rows in the data frame and the distribution of the `pm25tmean2` values is.

```{r}
summary(chic.f$pm25tmean2)
```

We can place an arbitrarily complex logical sequence inside of `filter()`, so we could for example extract the rows where PM2.5 is greater than 30 *and* temperature is greater than 80 degrees Fahrenheit.

```{r}
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
select(chic.f, date, tmpd, pm25tmean2)
```

Now there are only `r nrow(chic.f)` observations where both of those conditions are met.

Other logical operators you should be aware of include:

|  Operator |                  Meaning |                        Example |
|----------:|-------------------------:|-------------------------------:|
|      `==` |                   Equals |                 `city == chic` |
|      `!=` |           Does not equal |                 `city != chic` |
|       `>` |             Greater than |                  `tmpd > 32.0` |
|      `>=` | Greater than or equal to |                 `tmpd >- 32.0` |
|       `<` |                Less than |                  `tmpd < 32.0` |
|      `<=` |    Less than or equal to |                 `tmpd <= 32.0` |
|    `%in%` |              Included in | `city %in% c("chic", "bmore")` |
| `is.na()` |       Is a missing value |            `is.na(pm10tmean2)` |

::: callout-tip
### Note

If you are ever unsure of how to write a logical statement, but know how to write its opposite, you can use the `!` operator to negate the whole statement.

A common use of this is to identify observations with non-missing data (e.g., `!(is.na(pm10tmean2))`).
:::

### `arrange()`

The `arrange()` function is used to **reorder rows** of a data frame according to one of the variables/columns. Reordering rows of a data frame (while preserving corresponding order of other columns) is normally a pain to do in R. The `arrange()` function simplifies the process quite a bit.

Here we can order the rows of the data frame by date, so that the first row is the earliest (oldest) observation and the last row is the latest (most recent) observation.

```{r}
chicago <- arrange(chicago, date)
```

We can now check the first few rows

```{r}
head(select(chicago, date, pm25tmean2), 3)
```

and the last few rows.

```{r}
tail(select(chicago, date, pm25tmean2), 3)
```

Columns can be arranged in descending order too by useing the special `desc()` operator.

```{r}
chicago <- arrange(chicago, desc(date))
```

Looking at the first three and last three rows shows the dates in descending order.

```{r}
head(select(chicago, date, pm25tmean2), 3)
tail(select(chicago, date, pm25tmean2), 3)
```

### `rename()`

**Renaming a variable** in a data frame in R is surprisingly hard to do! The `rename()` function is designed to make this process easier.

Here you can see the names of the first five variables in the `chicago` data frame.

```{r}
head(chicago[, 1:5], 3)
```

The `dptp` column is supposed to represent the dew point temperature and the `pm25tmean2` column provides the PM2.5 data.

However, these names are pretty obscure or awkward and probably be renamed to something more sensible.

```{r}
chicago <- rename(chicago, dewpoint = dptp, pm25 = pm25tmean2)
head(chicago[, 1:5], 3)
```

The syntax inside the `rename()` function is to have the new name on the left-hand side of the `=` sign and the old name on the right-hand side.

::: callout-note
### Question

How would you do the equivalent in base R without `dplyr`?
:::

### `mutate()`

The `mutate()` function exists to **compute transformations of variables** in a data frame. Often, you want to create new variables that are derived from existing variables and `mutate()` provides a clean interface for doing that.

![Artwork by Allison Horst on mutate() function](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png){width="80%"}

\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\]

For example, with air pollution data, we often want to *detrend* the data by subtracting the mean from the data.

-   That way we can look at whether a given day's air pollution level is higher than or less than average (as opposed to looking at its absolute level).

Here, we create a `pm25detrend` variable that subtracts the mean from the `pm25` variable.

```{r}
chicago <- mutate(chicago, pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
head(chicago)
```

There is also the related `transmute()` function, which does the same thing as `mutate()` but then *drops all non-transformed variables*.

Here, we de-trend the PM10 and ozone (O3) variables.

```{r}
head(transmute(chicago, 
               pm10detrend = pm10tmean2 - mean(pm10tmean2, na.rm = TRUE),
               o3detrend = o3tmean2 - mean(o3tmean2, na.rm = TRUE)))
```

Note that there are only two columns in the transmuted data frame.

### `group_by()`

The `group_by()` function is used to **generate summary statistics** from the data frame within strata defined by a variable.

For example, in this air pollution dataset, you might want to know what the average annual level of PM2.5 is?

So the stratum is the year, and that is something we can derive from the `date` variable.

**In conjunction** with the `group_by()` function, we often use the `summarize()` function (or `summarise()` for some parts of the world).

::: callout-tip
### Note

The **general operation** here is a combination of

1.  Splitting a data frame into separate pieces defined by a variable or group of variables (`group_by()`)
2.  Then, applying a summary function across those subsets (`summarize()`)
:::

::: callout-tip
### Example

First, we can create a `year` variable using `as.POSIXlt()`.

```{r}
chicago <- mutate(chicago, year = as.POSIXlt(date)$year + 1900)
```

Now we can create a separate data frame that splits the original data frame by year.

```{r}
years <- group_by(chicago, year)
```

Finally, we compute summary statistics for each year in the data frame with the `summarize()` function.

```{r}
summarize(years, pm25 = mean(pm25, na.rm = TRUE), 
          o3 = max(o3tmean2, na.rm = TRUE), 
          no2 = median(no2tmean2, na.rm = TRUE))
```
:::

`summarize()` returns a data frame with `year` as the first column, and then the annual summary statistics of `pm25`, `o3`, and `no2`.

::: callout-tip
### More complicated example

In a slightly more complicated example, we might want to know what are the average levels of ozone (`o3`) and nitrogen dioxide (`no2`) within quintiles of `pm25`. A slicker way to do this would be through a regression model, but we can actually do this quickly with `group_by()` and `summarize()`.

First, we can create a categorical variable of `pm25` divided into quantiles

```{r}
qq <- quantile(chicago$pm25, seq(0, 1, 0.2), na.rm = TRUE)
chicago <- mutate(chicago, pm25.quint = cut(pm25, qq))
```

Now we can group the data frame by the `pm25.quint` variable.

```{r}
quint <- group_by(chicago, pm25.quint)
```

Finally, we can compute the mean of `o3` and `no2` within quintiles of `pm25`.

```{r}
summarize(quint, o3 = mean(o3tmean2, na.rm = TRUE), 
          no2 = mean(no2tmean2, na.rm = TRUE))
```
:::

From the table, it seems there is not a strong relationship between `pm25` and `o3`, but there appears to be a positive correlation between `pm25` and `no2`.

More sophisticated statistical modeling can help to provide precise answers to these questions, but a simple application of `dplyr` functions can often get you most of the way there.

### `%>%`

The pipeline operator `%>%` is very handy for **stringing together multiple `dplyr` functions in a sequence of operations**.

Notice above that every time we wanted to apply more than one function, the sequence gets buried in a sequence of nested function calls that is difficult to read, i.e.

```{r,eval=FALSE}
third(second(first(x)))
```

This **nesting is not a natural way** to think about a sequence of operations.

The `%>%` operator allows you to string operations in a left-to-right fashion, i.e.

```{r,eval=FALSE}
first(x) %>% second %>% third
```

::: callout-tip
### Example

Take the example that we just did in the last section.

That can be done with the following sequence in a single R expression.

```{r}
chicago %>% 
  mutate(year = as.POSIXlt(date)$year + 1900) %>%    
  group_by(year) %>% 
  summarize(pm25 = mean(pm25, na.rm = TRUE), 
            o3 = max(o3tmean2, na.rm = TRUE), 
            no2 = median(no2tmean2, na.rm = TRUE))
```
:::

This way we do not have to create a set of temporary variables along the way or create a massive nested sequence of function calls.

::: callout-tip
### Note

In the above code, I pass the `chicago` data frame to the first call to `mutate()`, but then afterwards I do not have to pass the first argument to `group_by()` or `summarize()`.

Once you travel down the pipeline with `%>%`, the first argument is taken to be the output of the previous element in the pipeline.
:::

Another example might be computing the average pollutant level by month. This could be useful to see if there are any seasonal trends in the data.

```{r}
mutate(chicago, month = as.POSIXlt(date)$mon + 1) %>% 
        group_by(month) %>% 
        summarize(pm25 = mean(pm25, na.rm = TRUE), 
                  o3 = max(o3tmean2, na.rm = TRUE), 
                  no2 = median(no2tmean2, na.rm = TRUE))
```

Here, we can see that `o3` tends to be low in the winter months and high in the summer while `no2` is higher in the winter and lower in the summer.

### `slice_*()`

The `slice_sample()` function of the `dplyr` package will allow you to see a **sample of random rows** in random order.

The number of rows to show is specified by the `n` argument.

-   This can be useful if you **do not want to print the entire tibble**, but you want to get a greater sense of the values.
-   This is a **good option for data analysis reports**, where printing the entire tibble would not be appropriate if the tibble is quite large.

::: callout-tip
### Example

```{r}
slice_sample(chicago, n = 10)
```
:::

You can also use `slice_head()` or `slice_tail()` to take a look at the top rows or bottom rows of your tibble. Again the number of rows can be specified with the `n` argument.

This will show the first 5 rows.

```{r}
slice_head(chicago, n = 5)
```

This will show the last 5 rows.

```{r}
slice_tail(chicago, n = 5)
```

# Summary

The `dplyr` pacfkage provides a concise set of operations for managing data frames. With these functions we can do a number of complex operations in just a few lines of code. In particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of `group_by()` and `summarize()`.

Once you learn the `dplyr` grammar there are a few additional benefits

-   `dplyr` can work with other data frame "back ends" such as SQL databases. There is an SQL interface for relational databases via the DBI package

-   `dplyr` can be integrated with the `data.table` package for large fast tables

The `dplyr` package is handy way to both simplify and speed up your data frame management code. It is rare that you get such a combination at the same time!

# Post-lecture materials

### Final Questions

Here are some post-lecture questions to help you think about the material discussed.

::: callout-note
### Questions

1.  How can you tell if an object is a tibble?
2.  What option controls how many additional column names are printed at the footer of a tibble?
3.  Using the `trees` dataset in base R (this dataset stores the girth, height, and volume for Black Cherry Trees) and using the pipe operator: (i) convert the `data.frame` to a tibble, (ii) filter for rows with a tree height of greater than 70, and (iii) order rows by `Volume` (smallest to largest).

```{r}
head(trees)
```
:::

### Additional Resources

::: callout-tip
-   <https://r4ds.had.co.nz/tibbles.html>
-   <https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling>
-   [dplyr cheat sheet from RStudio](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
:::
