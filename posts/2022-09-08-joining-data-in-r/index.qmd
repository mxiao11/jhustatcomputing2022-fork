---
title: "Joining data in R"
author: 
  - name: Stephanie Hicks
    url: https://stephaniehicks.com
    affiliation: Department of Biostatistics, Johns Hopkins
    affiliation_url: https://publichealth.jhu.edu
description: "Introduction to relational data and join functions in the dplyr R package"
date: 2022-09-08
categories: [module 2, week 2, R, programming, dplyr, here, tidyverse]
---

<!-- Add interesting quote -->

# Pre-lecture materials

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://r4ds.had.co.nz/relational-data>
2.  <https://rafalab.github.io/dsbook/joining-tables>
:::

### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics>
-   <https://r4ds.had.co.nz/relational-data>
-   <https://rafalab.github.io/dsbook/joining-tables>

# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Be able to define relational data and keys
-   Be able to define the three types of join functions for relational data
-   Be able to implement mutational join functions
:::

# Relational data

Data analyses rarely involve only a single table of data.

Typically you have many tables of data, and you **must combine the datasets** to answer the questions that you are interested in.

Collectively, **multiple tables of data are called relational data** because it is the *relations*, not just the individual datasets, that are important.

Relations are **always defined between a pair of tables**. All other relations are built up from this simple idea: the relations of three or more tables are always a property of the relations between each pair.

Sometimes both elements of a pair can be the same table! This is needed if, for example, you have a table of people, and each person has a reference to their parents.

To work with relational data you **need verbs that work with pairs of tables**.

::: callout-tip
### Three important families of verbs

There are three families of verbs designed to work with relational data:

-   [**Mutating joins**](https://r4ds.had.co.nz/relational-data.html#mutating-joins): A mutating join allows you to **combine variables from two tables**. It first matches observations by their keys, then copies across variables from one table to the other on the right side of the table (similar to `mutate()`). We will discuss a few of these below.
    -   See @sec-mutjoins for Table of mutating joins.
-   [**Filtering joins**](https://r4ds.had.co.nz/relational-data.html#filtering-joins): Filtering joins **match observations** in the same way as mutating joins, **but affect the observations, not the variables** (i.e. filter observations from one data frame based on whether or not they match an observation in the other).
    -   Two types: `semi_join(x, y)` and `anti_join(x, y)`.
-   [**Set operations**](https://r4ds.had.co.nz/relational-data.html#set-operations): Treat **observations as if they were set elements**. Typically used less frequently, but occasionally useful when you want to break a single complex filter into simpler pieces. All these operations work with a complete row, comparing the values of every variable. These expect the x and y inputs to have the same variables, and treat the observations like sets:
    -   Examples of set operations: `intersect(x, y)`, `union(x, y)`, and `setdiff(x, y)`.
:::

## Keys

The **variables used to connect each pair of tables** are called **keys**. A key is a variable (or set of variables) that uniquely identifies an observation. In simple cases, a single variable is sufficient to identify an observation.

::: callout-tip
### Note

There are two types of keys:

-   A **primary key** uniquely identifies an observation in its own table.
-   A **foreign key** uniquely identifies an observation in another table.
:::

Let's consider an example to help us understand the difference between a **primary key** and **foreign key**.

## Example of keys

Imagine you are conduct a study and **collecting data on subjects and a health outcome**.

Often, subjects will **make multiple visits** (a so-called longitudinal study) and so we will record the outcome for each visit. Similarly, we may record other information about them, such as the kind of housing they live in.

### The first table

This code creates a simple table with some made up data about some hypothetical subjects' outcomes.

```{r,message=FALSE}
library(tidyverse)

outcomes <- tibble(
        id = rep(c("a", "b", "c"), each = 3),
        visit = rep(0:2, 3),
        outcome = rnorm(3 * 3, 3)
)

print(outcomes)
```

Note that subjects are labeled by a unique identifer in the `id` column.

### A second table

Here is some code to create a second table (we will be joining the first and second tables shortly). This table contains some data about the hypothetical subjects' housing situation by recording the type of house they live in.

```{r second_table,exercise=TRUE,message=FALSE}
subjects <- tibble(
        id = c("a", "b", "c"),
        house = c("detached", "rowhouse", "rowhouse")
)

print(subjects)
```

::: callout-note
### Question

What is the **primary key** and **foreign key**?

-   The `outcomes$id` is a **primary key** because it uniquely identifies each subject in the `outcomes` table.
-   The `subjects$id` is a **foreign key** because it appears in the `subjects` table where it matches each subject to a unique `id`.
:::

# Mutating joins {#sec-mutjoins}

The `dplyr` package provides a set of **functions for joining two data frames** into a single data frame based on a set of key columns.

There are several functions in the `*_join()` family.

-   These functions all merge together two data frames
-   They differ in how they handle observations that exist in one but not both data frames.

Here, are the **four functions from this family** that you will likely use the most often:

```{r}
#| echo: false
#| out-width: '60%'
#| fig-align: 'center'
library(knitr)
join_funcs <- data.frame(func = c("`left_join()`",
                                  "`right_join()`",
                                  "`inner_join()`",
                                  "`full_join()`"),
                         does = c("Includes all observations in the left data frame, whether or not there is a match in the right data frame",
                                  "Includes all observations in the right data frame, whether or not there is a match in the left data frame",
                                  "Includes only observations that are in both data frames",
                                  "Includes all observations from both data frames"))
knitr::kable(join_funcs, col.names = c("Function", "What it includes in merged data frame"))
```

![](https://d33wubrfki0l68.cloudfront.net/aeab386461820b029b7e7606ccff1286f623bae1/ef0d4/diagrams/join-venn.png)

\[[Source from R for Data Science](https://r4ds.had.co.nz/relational-data#relational-data)\]

## Left Join

Recall the `outcomes` and `subjects` datasets above.

```{r}
outcomes
subjects
```

Suppose we want to create a table that combines the information about houses (`subjects`) with the information about the outcomes (`outcomes`).

We can use the `left_join()` function to merge the `outcomes` and `subjects` tables and produce the output above.

```{r leftjoin}
left_join(x = outcomes, y = subjects, by = "id")
```

::: callout-tip
### Note

The `by` argument indicates the column (or columns) that the two tables have in common.
:::

### Left Join with Incomplete Data

In the previous examples, the `subjects` table didn't have a `visit` column. But suppose it did? Maybe people move around during the study. We could image a table like this one.

```{r}
subjects <- tibble(
        id = c("a", "b", "c"),
        visit = c(0, 1, 0),
        house = c("detached", "rowhouse", "rowhouse"),
)

print(subjects)
```

When we left joint the tables now we get:

```{r}
left_join(outcomes, subjects, by = c("id", "visit"))
```

::: callout-tip
### Note

Two things to point out here:

1.  If we do not have information about a subject's housing in a given visit, the `left_join()` function automatically inserts an `NA` value to indicate that it is missing.

2.  We can "join" on multiple variable (e.g. here we joined on the `id` and the `visit` columns).
:::

We may even have a situation where we are missing housing data for a subject completely. The following table has no information about subject `a`.

```{r}
subjects <- tibble(
        id = c("b", "c"),
        visit = c(1, 0),
        house = c("rowhouse", "rowhouse"),
)

subjects
```

But we can still join the tables together and the `house` values for subject `a` will all be `NA`.

```{r}
left_join(x = outcomes, y = subjects, by = c("id", "visit"))
```

::: callout-tip
### Important

The bottom line for `left_join()` is that it **always retains the values in the "left" argument** (in this case the `outcomes` table).

-   If there are no corresponding values in the "right" argument, `NA` values will be filled in.
:::

## Inner Join

The `inner_join()` function only **retains the rows of both tables** that have corresponding values. Here we can see the difference.

```{r}
inner_join(x = outcomes, y = subjects, by = c("id", "visit"))
```

## Right Join

The `right_join()` function is like the `left_join()` function except that it **gives priority to the "right" hand argument**.

```{r}
right_join(x = outcomes, y = subjects, by = c("id", "visit"))
```

# Summary

-   `left_join()` is useful for merging a "large" data frame with a "smaller" one while retaining all the rows of the "large" data frame

-   `inner_join()` gives you the intersection of the rows between two data frames

-   `right_join()` is like `left_join()` with the arguments reversed (likely only useful at the end of a pipeline)

# Post-lecture materials

### Final Questions

Here are some post-lecture questions to help you think about the material discussed.

::: callout-note
### Questions

1.  If you had three data frames to combine with a shared key, how would you join them using the verbs you now know?

2.  Using `df1` and `df2` below, what is the difference between `inner_join(df1, df2)`, `semi_join(df1, df2)` and `anti_join(df1, df2)`?

```{r}
# Create first example data frame
df1 <- data.frame(ID = 1:3,
                  X1 = c("a1", "a2", "a3"))
# Create second example data frame
df2 <- data.frame(ID = 2:4, 
                  X2 = c("b1", "b2", "b3"))
```

3.  Try changing the order from the above e.g. `inner_join(df2, df1)`, `semi_join(df2, df1)` and `anti_join(df2, df1)`. What changed? What did not change?
:::

### Additional Resources

::: callout-tip
-   <https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics>
-   <https://r4ds.had.co.nz/relational-data>
-   <https://rafalab.github.io/dsbook/joining-tables>
:::
